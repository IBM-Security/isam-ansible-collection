---
# main task to configure signer certificates
- name: Help INFO (-e help=true)
  ansible.builtin.pause:
    echo: true
    prompt: |
      NAME
        configure_signer_certificates

      DESCRIPTION
        Role to configure signer certificates

      STEPS
        1) Configure signer certificates
        2) Commit changes

      EXAMPLES
        // configure all signer certificates from inventory
        ansible-playbook -i [...] ibm.isam.base.configure_signer_certificates.yml
        // configure only signer certificates from inventory for pdsrv.kdb
        ansible-playbook -i [...] ibm.isam.base.configure_signer_certificates.yml -e kdb_id=pdsrv

        // filter for specific action from a single inventory at runtime
        ansible-playbook -i [...] ibm.isam.base.configure_signer_certificates.yml -e cert_action=get_all
        ansible-playbook -i [...] ibm.isam.base.configure_signer_certificates.yml -e cert_action=get
        ansible-playbook -i [...] ibm.isam.base.configure_signer_certificates.yml -e cert_action=import_cert
        ansible-playbook -i [...] ibm.isam.base.configure_signer_certificates.yml -e cert_action=export_cert
        ansible-playbook -i [...] ibm.isam.base.configure_signer_certificates.yml -e cert_action=load
        ansible-playbook -i [...] ibm.isam.base.configure_signer_certificates.yml -e cert_action=delete

      INVENTORY
      ==========
      # configure multiple signer certificates
      signer_certificates:
        # import multiple signer certificates
        - cert_action: import_cert
          kdb_id: lmi_trust_store
          cert: files/ssl/lmi.crt # absolute or relative path supported
          label: sample_label
        - cert_action: import_cert
          kdb_id: lmi_trust_store
          cert: "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----" # string (you can use lookup plugins here, eg. for aws)
          label: sample_label2
        # get all certificates from keystore
        - cert_action: get_all
          kdb_id: pdsrv
        # get content of a specific certificate from keystore
        - cert_action: get
          kdb_id: pdsrv
          cert_id: sample_label
        # load public key into keystore
        - cert_action: load
          kdb_id: pdsrv
          label: runtime
          server: localhost
          port: 443
        # check_remote controls if ansible should check remote certificate by retrieving it or simply by checking for existence of the label in the kdb
          check_remote: false
        # export a certificate to local directory
        - cert_action: export_cert
          kdb_id: pdsrv
          cert_id: runtime
          filename: files/ssl/runtime.cert # absolute or relative path supported
        # delete a specific signer certificate from keystore
        - cert_action: delete
          kdb_id: pdsrv
          cert_id: runtime
      ==========

      INTERACTION
        ENTER         = continue
        Ctrl+C + 'C'  = continue
        Ctrl+C + 'A'  = abort
  when: help is defined

- name: Configure signer certificates [-e cert_action=[import_cert] -e kdb_id=<kdb>]
  vars:
    _homedir_path: "{{ (homedir=='') | ternary('', homedir + '/') }}"
    _cert: "{{ ((item.cert | default('')) is search('-----BEGIN CERTIFICATE-----')) |
           ternary( '-----BEGIN CERTIFICATE-----\\n' ~ (item.cert | regex_replace('[\\r\\n\\t]+','') | replace('-----BEGIN CERTIFICATE-----', '') | replace('-----END CERTIFICATE-----', '')) ~  '\\n-----END CERTIFICATE-----',
           ((homedir=='') | ternary('', homedir + '/')) + item.cert) }}"
  ibm.isam.isam:
    log: "{{ log_level | default(omit) }}"
    force: "{{ force | default(omit) }}"
    action: ibmsecurity.isam.base.ssl_certificates.signer_certificate.{{ item.cert_action | default('import_cert') }}
    isamapi: "{{ {'kdb_id': item.kdb_id} | combine({'label': item.label} if (item.label is defined) else {})
      | combine({'cert': _cert} if (item.cert is defined) else {})
      | combine( (item.preserve_label is defined) | ternary({'preserve_label': (item.preserve_label | default('') | string)},{}) )
      | combine({'cert_id': item.cert_id} if (item.cert_id is defined) else {})
      | combine({'server': item.server} if (item.server is defined) else {})
      | combine({'port': item.port} if (item.port is defined) else {})
      | combine({'check_remote': item.check_remote} if (item.check_remote is defined) else {})
      | combine({'filename': _homedir_path + item.filename} if (item.filename is defined) else {}) }}"
  loop: "{{ signer_certificates }}"
  loop_control:
    label: "kdb: {{ item.kdb_id }} - {{ item.label | default('') }}"
  when:
    - item.cert_action == cert_action
    - item.kdb_id == kdb_id
  notify: Commit Changes
