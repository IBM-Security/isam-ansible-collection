---
# main task to configure personal certificates
- name: Help INFO (-e help=true)
  ansible.builtin.pause:
    echo: true
    prompt: |
      NAME
        configure_personal_certificates

      DESCRIPTION
        Role to configure personal certificates

      STEPS
        1) Configure personal certificates
        2) Commit changes

      EXAMPLES
        // configure all personal certificates from inventory
        ansible-playbook -i [...] ibm.isam.base.configure_personal_certificates.yml
        // configure only personal certificates from inventory for pdsrv.kdb
        ansible-playbook -i [...] ibm.isam.base.configure_personal_certificates.yml -e kdb_id=pdsrv

        // filter for specific action from a single inventory at runtime
        ansible-playbook -i [...] ibm.isam.base.configure_personal_certificates.yml -e cert_action=get_all
        ansible-playbook -i [...] ibm.isam.base.configure_personal_certificates.yml -e cert_action=get
        ansible-playbook -i [...] ibm.isam.base.configure_personal_certificates.yml -e cert_action=generate
        ansible-playbook -i [...] ibm.isam.base.configure_personal_certificates.yml -e cert_action=set
        ansible-playbook -i [...] ibm.isam.base.configure_personal_certificates.yml -e cert_action=import_cert
        ansible-playbook -i [...] ibm.isam.base.configure_personal_certificates.yml -e cert_action=export_cert
        ansible-playbook -i [...] ibm.isam.base.configure_personal_certificates.yml -e cert_action=receive
        ansible-playbook -i [...] ibm.isam.base.configure_personal_certificates.yml -e cert_action=delete

      INVENTORY
      ==========
      # configure multiple personal certificates
      personal_certificates:
        # get all certificates from keystore
        - cert_action: get_all
          kdb_id: pdsrv
        # get content of a specific certificate from keystore
        - cert_action: get
          kdb_id: pdsrv
          cert_id: WebSEAL-Test-Only
        # Generating a self-signed personal certificate in a certificate database
        - cert_action: generate
          kdb_id: pdsrv
          label: sample_label
          dn: 'CN=weblinux.Raleigh.ibm.com,O=ibm,OU=IBMHTTP Server,L=RTP,ST=NC,C=US'
          expire: '365' # optional default: '365'
          # default: 'no' # optional default: 'no'  No longer valid
          size: '2048' # optional default: '1024' OPTIONS: on SHA***WithRSA['1024','2048','4096'] on SHA***WithECDSA['256','384','512']
          signature_algorithm: 'SHA512WithRSA' # optional default: '' if empty will get SHA1WithRSASignature
                # OPTIONS: ['SHA256WithRSA','SHA384WithRSA','SHA512WithRSA','SHA256WithECDSA','SHA384WithECDSA','SHA512WithECDSA']
        # Setting a personal certificate as default in a certificate database
        - cert_action: set # NO LONGER VALID 10.0.3+
          kdb_id: pdsrv
          cert_id: sample_label
          default: 'no' # optional default: 'no'
        # Receiving a personal certificate into a certificate database
        - cert_action: receive
          kdb_id: pdsrv
          label: sample_label
          cert: files/ssl/runtime.csr # absolute or relative path supported
        # Exporting a personal certificate from a certificate database
        - cert_action: export_cert
          kdb_id: pdsrv
          cert_id: sample_label
          filename: files/ssl/sample.cert # absolute or relative path supported
        # Importing a personal certificate into a certificate database
        - cert_action: import_cert
          kdb_id: pdsrv
          label: sample_label
          cert: files/ssl/sample.cert # absolute or relative path supported
          password: 'passw0rd'
        # Importing a personal certificate into a certificate database
        - cert_action: extract_cert
          kdb_id: pdsrv
          cert_id: sample_label
          filename: files/ssl/sample.cert # absolute or relative path supported
          password: 'passw0rd'
        # Deleting a personal certificate from a certificate database
        - cert_action: delete
          kdb_id: pdsrv
          cert_id: runtime
        - cert_action: rename
          kdb_id: pdsrv
          cert_id: runtime
          new_id: runtime2
      ==========

      INTERACTION
        ENTER         = continue
        Ctrl+C + 'C'  = continue
        Ctrl+C + 'A'  = abort
  when: help is defined

- name: Configure personal certificates [-e cert_action=[get_all|get|generate|set|receive|export_cert|extract_cert|import_cert|delete|rename] -e kdb_id=<kdb>]
  ibm.isam.isam:
    log: "{{ log_level | default(omit) }}"
    force: "{{ force | default(omit) }}"
    action: ibmsecurity.isam.base.ssl_certificates.personal_certificate.{{ item.cert_action }}
    isamapi: "{{ {'kdb_id': item.kdb_id} | combine({'label': item.label} if (item.label is defined) else {})
      | combine({'cert': homedir + '/' + item.cert} if (item.cert is defined) else {})
      | combine({'cert_id': item.cert_id} if (item.cert_id is defined) else {})
      | combine({'dn': item.dn} if (item.dn is defined) else {})
      | combine({'expire': item.expire} if (item.expire is defined) else {})
      | combine({'size': item.size} if (item.size is defined) else {})
      | combine({'default': item.default} if (item.default is defined) else {})
      | combine({'password': item.password} if (item.password is defined) else {})
      | combine({'signature_algorithm': item.signature_algorithm} if (item.signature_algorithm is defined) else {})
      | combine({'filename': homedir + '/' + item.filename} if (item.filename is defined) else {})
      | combine({'new_id': item.new_id} if (item.new_id is defined) else {})
      }}"
  loop: "{{ personal_certificates }}"
  loop_control:
    label: "{{ item.cert_action }}: {{ item.label | default('') }}{{ item.cert_id | default('') }} into {{ item.kdb_id }}"
  when:
    - item.cert_action == cert_action
    - item.kdb_id == kdb_id
  notify: Commit Changes
